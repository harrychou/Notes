Ch1 What is the Shell

	$: command prompt - where waiting the user's command
	\: root directory
	~: user's home directory

	command history: down/up arrow keys
	
	in windows: use cygwin

	date command: output current date
	cal command: output calendar
		- in cygwin: need to install package util-linux
		- cal -3 : output 3 months
		- cal 2013 : output whole 2013
	df command:
		- display filesystem
	free command:
		- display memory usage
	exit command:
		- leave shell environment

	virtual console/terminals
		- Ctrl F1 to F6
		- Ctrl F7 belong to GUI

Ch2 Navigation
	
	in Linux: everything is a file
	
	pwd: present working directory
	ls: list
		- absolut path
		- relative path
	cd: change directory
		- to change to another user cd ~harrychou

Ch3 Explore

	linux command format
		command -options arguments

	ls
		- -al options
		- understand the long format
	file - determin file type
	less 
		- display file content
		- command for less content page
			* f: forward one page
			* b: back one page
			* g: beginning of file
			* G: end of file
			* /pattern: search
			* n: next match
			* q; quit
		- less is more

	tour of common locations /, /bin, /boot, 
		- /bin: binary for boot time
		- /boot: linux kernel
		- /sbin
		- /usr/bin ...

	symbolic link 

Ch4 Manipulate files and directories

	cp : copy
	mv ; move/rename
	mkdir : make directory	
	rm : remove
	ln : create link (hard/symbolic)

	to copy directory, but only replace with newer or non-exit
		- cp -u directory1/* directory2

	wildcard:
		*
		?
		[abc] : a or b or c
		[0-9]
		[[:upper:]]* : any file begins with uppercase letter
		[![:digit:]]* : any file that does not begin with digit
		[[:lower:]123] : any file start with lowercase or 1 or 2 or 3

  mkdir
		- can create multiple directories at once

	copy
		- can copy file or directories
		-i require confirmation
		-u only update (newer or non-exist in target)

	mv
		- can be used for rename
		- can move mulitple files at once (mv file1 file2 dir2)
		-u only move when the file is newer (if exists at all)
	
	rm
		- can remove multiple items
		-r to remove non-empty directory

	ln
		-s create symbolic link

Ch5 Working with Commands

	type : get the type of command
	which : where is the executable of the command
	man : manual page
	apropos : display a list of apropriate commands
	info : display info
	whatis : very brief description
	alias : create alias of a command

	types of commands:
	- executable: compiled or script
	- builtin: command built into shell itself
	- shell function
	- alias

	type:
		- show the type of command

	which
		- show where the command is from
		- only works for executable

	ways to get help on command
		- help (help ls)
		- --help (ls --help)
		- man (man ls)
		- apropos (apropos search_str)
			* same as man -k 
		- whatis 
			* display very short description
		- info
			* display the info page

	other help info
		- /usr/share/doc
		- to read .gz file, use zless

	run multiple commands in one line
		- command1; command2; command3;

	make them into alias
		- alias foo='cd /usr; ls; cd -'
		- before making alias, use type to check if the name has already been used
		- unalias : to remove alias
	
	cd -
		* go back to previous directory

Ch6 Redirection

	cat - concantenate file
	sort - sort lines of text
	uniq - report or omit repeated lines
	wc - word count
	grep - print matched lines
	head - output the first part of a file
	tail - output the last part of a file
	tee - read from std input and output to stdout and files

	standard input/output/error
		- everything in Linus is a file
		- stadnard input/output/error are all files
		- standard input connects to keyboard
		- standard output/error connect to screen

	redirect stdout
		- redirect standard output to file
		- even command error has empty standard output
			> empty.txt to create an empty file
		- to append to file, use >> 

	redirect stderr
		- use file descriptor 
			* stdin 0
			* stdout 1
			* stderr 2
		- to redirect standard error
			ls -l /path 2> err.log
		- to redirect both output and standard error
			ls -l /path > output.txt 2>&1
		- another way ...
			ls -l /path &> out.txt
	  - to throw out the output 
			redirect to /dev/null	
	
	cat
		- concatenate files
		- reads one or more files and output to stdout
		- example
			cat file* > file3
			(reads all files start with 'file' and output to file3)
		- if no arguments, cat reads from stdin (keyboard)
			(use Ctrl-D for EOF)
		- car < file3 > file4
			reads from file3 ... and output to file4 

	pipeline
		- any command that reads from stdin and output to stdout is using pipeline
		- pipeline is a shell feature

	filters
		- special kind of command that use pipeline 
		- examples
			ls /folder1 /folder2 | sort | less
			(sort is the filter here - display all files in folder1 and folder2, sort the output, and use less to display)
		- sort
		- uniq
		- wc: print line/word/byte counts
		- grep: print matching lines
				* -i (case insensitive)
				* -v (print NOT matching lines)
		- ls /bin /usr/bin | sort | uniq | wc -l
			* get all files in two folders
			* sort them
			* take out duplicates
			* get the number of lines
		- ls /bin /user/bin | sort | uniq | grep zip
			* same as above
			* grep zip will list out only lines with 'zip'
		- head/tail: print the first or last couple lines
			head -n 5 filename.txt
			ls /usr/bin | tail -n 5
			tail -f /var/log/messages
				* this will monitor the dynamic messages file, -f will force to update
		- tee output to file while continue to stdout
			ls /usr/bin | tee out.txt | grep zip
			(will output all ls result to out.txt, while only to screen those with zip)

	linux has tools that you can actually build the things you want instead of things given to you by windows

Ch7 Seeing the world as the shell sees it

 
 
	



