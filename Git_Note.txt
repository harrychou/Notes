http://git-scm.com/book
Pro Git

1. Getting Started

1.1 About Version Control

	A VCS allows you to: 
	* revert files back to a previous state, 
	* revert the entire project back to a previous state, 
	* review changes made over time, 
	* see who last modified something that might be causing a problem, 
	* who introduced an issue and when, 
	* and more. 

	Types of VCS (version control system)
	* Local http://git-scm.com/figures/18333fig0101-tn.png
		- RCS
	* Central http://git-scm.com/figures/18333fig0102-tn.png
		- CVS/Subversion/Perforce
		- Single Server contains all versions
		- Adv
			* collaboration
			* easy to admin
		- Disadv
			* single point of failure 
	* Distributed http://git-scm.com/figures/18333fig0103-tn.png
		- Git/Mercurial/Bazar/Darcs
		- Each client have full mirror of the respository
		- Each client or server can be used to restore/copy to each other
		- Enable more flexible workflow within project

1.2 A Short History of Git

	From Linux project
	* from 1991 to 2002 - just patches and archive files
	* from 2002 - use proprietary DVCS called BitKeeper
	* 2005 - BitKeeper company stop provide it free of charge
		- Linus Torvalds started developing their own tool
	* goals
		- speed
		- simple design
		- strong support for non-linear development
		  (thousand of parallel branches)
		- fully distributed
		- able to handle big project (Linux Kernel, speed and data size)

1.3 Git Basics

	Git Basic
	* Important to learn basics of how Git works
	* Git's way of thinking/handling info are very different - source of confusion

	What's different of Git from others
	* Other think in terms of files and changes to the files
		- http://git-scm.com/figures/18333fig0104-tn.png
	* Git thinks of its data more like a set of snapshots of a mini filesystem
		http://git-scm.com/figures/18333fig0105-tn.png
		- every commit is like taking a snashop
		- if one file has no change, just store pointer to previous file instead save the new file
		- Git more like a mini filesystem with some incredibly powerful tools built on top of it
		- the benefits will be covered when discussing Git branching

  Nearly Every Operation Is Local 
  * no need to have a remote server
  * you can do everything and enjoy the benefit of version control
  * fast - encouraged to check in

  Git Integrity
  * everything stored by checksum
  	- all changes are definitely tracked by Git
	* You canâ€™t lose information in transit or get file corruption without Git being able to detect it.
	* SHA-1 hash
		- 40-char string
		- calculated based on the contents of a file or directory structure of Git
		- ex: 24b9da6552252987aa493b52f8696cd6d3b00373
	* Git store everything based on the hash string (which represents content) rather than file name

	Git only add data to repository
	* everything is undoable
	* very hard to lose data in Git

	Three state the files can reside in
	* three states
		- commited: safely saved to git database
		- modified
		- staged: marked a modified file in its version to go into commited snapshot
	* three main sections http://git-scm.com/figures/18333fig0106-tn.png
		- working directory
			* single checkout of one version
			* pulled out of compressed database from Git repository
		- staging area
			* a simple file
			* store information about what will go into next commit
			* aka: index
		- git directory (repository)
			* where git store metadata
			* database
			* copied to all repositories

1.4 Installing Git

	* from source
	* on Linux
	* on Mac
	* on Windows

1.5 First-Time Git Setup

	one-time setup, but can update anytime

	git config
	* main tool to control Git
	* tool to setup variables
	* the info are stored in three places:
		(more specific place trumps the general one)
		- /etc/gitcofnig
			* git config --system
			* shared by all users
			* C:\Program Files (x86)\Git\etc\gitconfig
		- ~/.gitconfig
			* C:\Users\c00522\.gitconfig
			* only for you
			* git config --global
		- .git/config
			* only for that repository

	Things to config
	* identity
		- git config --global user.name "Harry Chou"
		- git config --global user.email "harrychou@gmail.com"
	* editor
		- git config --global core.editor emacs
	* diff
		- git config --global merge.tool vimdiff

	display configs
	* git config --list
	* git config re

1.6 Getting Help

	git help <verb>
	git <verb> --help
	man git-<verb>

1.7 Summary

2. Git Basics

	* covers all basic commands
	* configure/initialize repository
	* begin/stop tracking files
	* stage/commit changes
	* ignore files
	* file patterns
	* undo mistakes
	* browse history of the project
	* view changes between commits
	* push/pull from remote repository

2.1 Getting a Git Repository

	Two ways to get a git repository
	* add an existing directory into Git
	* clone an respository from remote

	git init
	* start tracking files in the existing directory
	* create .git folder
	* this is a skeleton
	* to start tracking
		- git add *.c
		- git add REAMME
		- git commit -m 'initial commit'

	

2.2 Recording Changes to the Repository
2.3 Viewing the Commit History
2.4 Undoing Things
2.5 Working with Remotes
2.6 Tagging
2.7 Tips and Tricks
2.8 Summary