http://git-scm.com/book
Pro Git

1. Getting Started

1.1 About Version Control

	A VCS allows you to: 
	* revert files back to a previous state, 
	* revert the entire project back to a previous state, 
	* review changes made over time, 
	* see who last modified something that might be causing a problem, 
	* who introduced an issue and when, 
	* and more. 

	Types of VCS (version control system)
	* Local http://git-scm.com/figures/18333fig0101-tn.png
		- RCS
	* Central http://git-scm.com/figures/18333fig0102-tn.png
		- CVS/Subversion/Perforce
		- Single Server contains all versions
		- Adv
			* collaboration
			* easy to admin
		- Disadv
			* single point of failure 
	* Distributed http://git-scm.com/figures/18333fig0103-tn.png
		- Git/Mercurial/Bazar/Darcs
		- Each client have full mirror of the respository
		- Each client or server can be used to restore/copy to each other
		- Enable more flexible workflow within project

1.2 A Short History of Git

	From Linux project
	* from 1991 to 2002 - just patches and archive files
	* from 2002 - use proprietary DVCS called BitKeeper
	* 2005 - BitKeeper company stop provide it free of charge
		- Linus Torvalds started developing their own tool
	* goals
		- speed
		- simple design
		- strong support for non-linear development
		  (thousand of parallel branches)
		- fully distributed
		- able to handle big project (Linux Kernel, speed and data size)

1.3 Git Basics

	Git Basic
	* Important to learn basics of how Git works
	* Git's way of thinking/handling info are very different - source of confusion

	What's different of Git from others
	* Other think in terms of files and changes to the files
		- http://git-scm.com/figures/18333fig0104-tn.png
	* Git thinks of its data more like a set of snapshots of a mini filesystem
		http://git-scm.com/figures/18333fig0105-tn.png
		- every commit is like taking a snashop
		- if one file has no change, just store pointer to previous file instead save the new file
		- Git more like a mini filesystem with some incredibly powerful tools built on top of it
		- the benefits will be covered when discussing Git branching

  Nearly Every Operation Is Local 
  * no need to have a remote server
  * you can do everything and enjoy the benefit of version control
  * fast - encouraged to check in

  Git Integrity
  * everything stored by checksum
  	- all changes are definitely tracked by Git
	* You canâ€™t lose information in transit or get file corruption without Git being able to detect it.
	* SHA-1 hash
		- 40-char string
		- calculated based on the contents of a file or directory structure of Git
		- ex: 24b9da6552252987aa493b52f8696cd6d3b00373
	* Git store everything based on the hash string (which represents content) rather than file name

	Git only add data to repository
	* everything is undoable
	* very hard to lose data in Git

	Three state the files can reside in
	* three states
		- commited: safely saved to git database
		- modified
		- staged: marked a modified file in its version to go into commited snapshot
	* three main sections http://git-scm.com/figures/18333fig0106-tn.png
		- working directory
			* single checkout of one version
			* pulled out of compressed database from Git repository
		- staging area
			* a simple file
			* store information about what will go into next commit
			* aka: index
		- git directory (repository)
			* where git store metadata
			* database
			* copied to all repositories

1.4 Installing Git

	* from source
	* on Linux
	* on Mac
	* on Windows

1.5 First-Time Git Setup

	one-time setup, but can update anytime

	git config
	* main tool to control Git
	* tool to setup variables
	* the info are stored in three places:
		(more specific place trumps the general one)
		- /etc/gitcofnig
			* git config --system
			* shared by all users
			* C:\Program Files (x86)\Git\etc\gitconfig
		- ~/.gitconfig
			* C:\Users\c00522\.gitconfig
			* only for you
			* git config --global
		- .git/config
			* only for that repository

	Things to config
	* identity
		- git config --global user.name "Harry Chou"
		- git config --global user.email "harrychou@gmail.com"
	* editor
		- git config --global core.editor emacs
	* diff
		- git config --global merge.tool vimdiff

	display configs
	* git config --list
	* git config re

1.6 Getting Help

	git help <verb>
	git <verb> --help
	man git-<verb>

1.7 Summary

2. Git Basics

	* covers all basic commands
	* configure/initialize repository
	* begin/stop tracking files
	* stage/commit changes
	* ignore files
	* file patterns
	* undo mistakes
	* browse history of the project
	* view changes between commits
	* push/pull from remote repository

2.1 Getting a Git Repository

	Two ways to get a git repository
	* add an existing directory into Git
	* clone an respository from remote

	git init
	* start tracking files in the existing directory
	* create .git folder
	* this is a skeleton
	* to start tracking
		- git add *.c
		- git add REAMME
		- git commit -m 'initial commit'

	git clone [url]
	* it's not checkout
		- checkout means getting a working copy
		- clone means getting the whole repository
		- server is just another place to store repository
	* ex: git clone git://github.com/user/repository1
	* what happens?
		- create a subdirectory repository1
		- initialize .git
		- pull down the data
		- check out a latest copy to be worked on
	* to clone into directory with another name
	  git clone [url] directoryName
	* git tranfer protocols
		- git://
		- http:// or https://
		- user@server:/path.git (SSH transfer)

2.2 Recording Changes to the Repository

	at some point of your work, you want to record your work as a version

	tracked/untracked fiels
	* tracked files: 
		- files in last snapshot or staged to go into next snapshot
		- can be in the state of: unmodifed, modified, staged
	* untracked files
		- files not in last snaphot and not staged

	check the status of the files
	* git status
	* by default should be 'nothing to commit'

	adding a new file
	* after adding a new file -> the file is untracked
	* to track it
	  git add filename
	* now the file is tracked and staged
	* to track directory (recursively)
	  git add directoryName

	git add will stage the extact file while it is staged
	* if file modified after staged, it can be both modified and staged
	* when commit without git add again, the staged content will be committed
	* you have to stage again (git add) to be able to commit the later change

	ignore files
	* some files are transient and autogenerated 
	  --> you don't really want to record their history
	* use .ignore file with glob patterns
	* rules for glob patterns: 
		- Blank lines or lines starting with # are ignored.
		- Standard glob patterns work.
		- You can end patterns with a forward slash (/) to specify a directory.
		- You can negate a pattern by starting it with an exclamation point (!).

		# a comment - this is ignored
		# no .a files
		*.a
		# but do track lib.a, even though you're ignoring .a files above
		!lib.a
		# only ignore the root TODO file, not subdir/TODO
		/TODO
		# ignore all files in the build/ directory
		build/
		# ignore doc/notes.txt, but not doc/server/arch.txt
		doc/*.txt
		# ignore all .txt files in the doc/ directory
		doc/**/*.txt

	show difference (git diff)
	* two type of diff
		- compare working directory to staged are
		  (what has been changed but not staged yet)
		- compare stage area to repository
		  (what you plan to commit to what has already been committed)
	* git diff by default do first one
	* git diff --staged do the second one

	commit changes
	* git commit
	* by default will use default editor (git config --global core.editor) to add comment
	* git commit -m 'comment'
	* git commit -am 'comment'
		- allow you to skip the (git add)
		- only add tracked files (for untracked files you still need manual git add)

	remove files
	* by only delete the file, your repository still track the file
	* use git rm to untrack the file
		- if the file is added to the index already, 
		  you must force the removal with the -f option.
		- this is to make removing content from repository difficult
	* to only remove from staged area but not working directory
	  (so the file is still in local directory, but Git won't track it)
	  git rm --cached file
	* git rm can take pattern to remove multiple files

	mvoe files
	* git mv file_from file_to
	* same as
	  mv file_from file_to
	  git rm file_from
	  git add file_to
	* Git does not store rename file in metadata, git only try to figure that out after the fact
	* that means, you can rename using another tool and (git rm) (git add)

2.3 Viewing the Commit History
2.4 Undoing Things
2.5 Working with Remotes
2.6 Tagging
2.7 Tips and Tricks
2.8 Summary